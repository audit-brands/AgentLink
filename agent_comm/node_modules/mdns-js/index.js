import { EventEmitter } from 'events';
import { vi } from 'vitest';

export class Advertisement extends EventEmitter {
    constructor(serviceType: any, port: number, options: any) {
        super();
        this.start = vi.fn(() => {
            // Emit ready event after start
            process.nextTick(() => {
                this.emit('ready');
                this.emit('started');
            });
            return this;
        });
        this.stop = vi.fn(() => {
            process.nextTick(() => this.emit('stopped'));
            return this;
        });
    }
}

export class Browser extends EventEmitter {
    constructor(serviceType: any) {
        super();
        this.discover = vi.fn(() => {
            // Emit ready event when discover is called
            process.nextTick(() => {
                this.emit('ready');
                this.emit('update', {
                    addresses: ['127.0.0.1'],
                    port: 8080,
                    txt: { 
                        environment: 'test',
                        capabilities: 'compute,storage'
                    },
                    name: 'test-service'
                });
            });
            return this;
        });
        this.stop = vi.fn(() => {
            process.nextTick(() => this.emit('stopped'));
            return this;
        });
        this.start = vi.fn(() => {
            process.nextTick(() => {
                this.emit('ready');
                this.emit('update', {
                    addresses: ['127.0.0.1'],
                    port: 8080,
                    txt: { 
                        environment: 'test',
                        capabilities: 'compute,storage'
                    },
                    name: 'test-service'
                });
            });
            return this;
        });
    }
}

export const createAdvertisement = vi.fn((serviceType: any, port: number, options: any) => {
    return new Advertisement(serviceType, port, options);
});

export const createBrowser = vi.fn((serviceType: any) => {
    return new Browser(serviceType);
});

export const tcp = vi.fn((name: string) => ({ name, protocol: 'tcp' }));